Index: GITLAB/Andres_Test.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import tkinter as tk\r\nfrom enum import verify\r\nfrom tkinter import messagebox, ttk\r\nimport re\r\nimport tkintermapview\r\nimport requests\r\nimport matplotlib.pyplot as plt\r\nimport matplotlib.ticker as ticker\r\n\r\n\r\n#fruit thing\r\n\r\nclass MapApp:\r\n    def __init__(self, width=1200, height=1000, title=\"Map Viewer\"):\r\n        \"\"\"Initialize the Tkinter window and map widget\"\"\"\r\n        self.root = tk.Tk()\r\n        self.root.geometry(f\"{width}x{height}\")\r\n        self.root.title(title)\r\n        self.map_widget = tkintermapview.TkinterMapView(self.root, width=width, height=height, corner_radius=0)\r\n        self.map_widget.pack()\r\n\r\n    def set_initial_position(self, latitude, longitude, zoom=0):\r\n        \"\"\"Set the map's initial position and zoom level\"\"\"\r\n        self.map_widget.set_position(latitude, longitude, zoom)\r\n\r\n    def add_marker(self, latitude, longitude, label):\r\n        \"\"\"dd a marker to the map at the specified coordinates with a label\"\"\"\r\n        self.map_widget.set_marker(latitude, longitude, label)\r\n\r\n    def add_path(self, path, color=\"black\"):\r\n        \"\"\"Draw a line path on the map between a sequence of points\"\"\"\r\n        self.map_widget.set_path(path, color=color)\r\n\r\n    def run(self):\r\n        \"\"\"Start the Tkinter main loop\"\"\"\r\n        self.root.mainloop()\r\n\r\nclass RouteData:\r\n    def __init__(self, url):\r\n        \"\"\"Fetch and store route data from a given URL\"\"\"\r\n        self.data = self.fetch_data(url)\r\n\r\n    @staticmethod\r\n    def fetch_data(url):\r\n        \"\"\"Request data from a URL and return as plain text\"\"\"\r\n        response = requests.get(url, verify=False)\r\n        return response.text\r\n\r\n    def parse_data(self):\r\n        \"\"\"Parse the CSV route data into a list of (lat, lon, temperature, humidity) tuples\"\"\"\r\n        lines = self.data.strip().split('\\n')\r\n        coordinates = []\r\n        humidity_data = []\r\n        temp = []\r\n        LF = []\r\n\r\n        for line in lines:\r\n            values = line.split(',')\r\n            if len(values) == 5:\r\n                _, latitude, longitude, temperature, humidity = values\r\n                if (latitude, longitude, temperature) in coordinates:\r\n                    continue\r\n                coordinates.append((float(latitude), float(longitude), float(temperature)))\r\n                humidity_data.append((float(latitude), float(longitude), int(humidity)))\r\n                temp.append(float(temperature))\r\n                LF.append(float(humidity))\r\n\r\n        return coordinates, humidity_data , temp, LF\r\n\r\nclass RouteSelector:\r\n    def __init__(self, options = None):\r\n        \"\"\" Initialize the selector with route options.\r\n            Default options are used if none are provided.\"\"\"\r\n\r\n        self.default_options = [\r\n            ('Route Map demo1',\r\n             'https://fl-17-240.zhdk.cloud.switch.ch/containers/grp2/routes/demo?start=0&end=-1&format=csv'),\r\n            ('Route Map demo2',\r\n             'https://fl-17-240.zhdk.cloud.switch.ch/containers/grp2/routes/demo2_extremvieledaten?start=0&end=-1&format=csv')\r\n        ]\r\n        # Use provided options if available; otherwise, use default options\r\n        self.options = options if options is not None else self.default_options\r\n        self.selected_url = None  # Store the selected URL\r\n\r\n    @staticmethod\r\n    def is_valid_url(url):\r\n        \"\"\"Regular expression to validate the URL\"\"\"\r\n        url_regex = re.compile(\r\n            r'^(?:http|https)://'  # http:// or https://\r\n            r'(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,}'  # domain\r\n            r'(?::\\d{2,5})?'  # optional port\r\n            r'(?:[/?#]\\S*)?$', re.IGNORECASE  # path/query fragment\r\n        )\r\n        return re.match(url_regex, url) is not None\r\n\r\n    def submit_selection(self,var, popup, label, custom_entry):\r\n        \"\"\"Handle the submission of the selected option or custom URL.\"\"\"\r\n        selected_option = var.get()\r\n        selected_label = label\r\n        if selected_option == \"Custom Map URL\":  # selected option\r\n            selected_label = \"Custom Map URL\"  # label\r\n            selected_option = custom_entry.get()\r\n            if not self.is_valid_url(selected_option):  # Check if it's a valid URL\r\n                messagebox.showwarning(\"Invalid URL\", \"Please enter a valid URL.\")\r\n\r\n        elif selected_option:\r\n            messagebox.showinfo(\"Selection\", f\"You selected: {selected_label}\")\r\n            self.selected_url = selected_option\r\n            popup.destroy()  # Close the window after selection\r\n        else:\r\n            messagebox.showwarning(\"No selection\", \"Please select an option.\")\r\n\r\n    def map_options(self):\r\n        \"\"\"Create the popup to Select the route or to enter a custom URL for the route\"\"\"\r\n\r\n        popup = tk.Tk()\r\n        popup.title(\"Select route!\")\r\n        #popup.geometry(\"600x400\")\r\n\r\n        # Variable to store the selected option\r\n        var = tk.StringVar(value=\"\")\r\n\r\n        for label, url in self.options:\r\n            radio_button = tk.Radiobutton(popup, text=label, variable=var, value=url).pack(anchor=\"w\")\r\n\r\n        # Add a radio button for the \"Other\" option\r\n        other_radio_button = tk.Radiobutton(popup, text=\"Custom Map URL\", variable=var, value=\"Custom Map URL\").pack(anchor=\"w\")\r\n\r\n        # Entry box for custom input (always visible)\r\n        custom_entry = tk.Entry(popup)\r\n        custom_entry.pack(anchor=\"w\", padx=20, pady=5)\r\n\r\n        # Submit button to confirm selection\r\n        submit_button = tk.Button(popup, text=\"Submit\",\r\n                                  command=lambda: self.submit_selection(var, popup, label, custom_entry))\r\n        submit_button.pack(pady=20)\r\n\r\n        popup.wait_window()  # Wait for the popup window to close\r\n\r\n        return self.selected_url  # Return the selected URL after the window is closed\r\n\r\nclass RouteVisualizer:\r\n    def __init__(self, map_app, coordinates, humidity_data):\r\n        \"\"\"Initialize with a MapApp instance and route data\"\"\"\r\n        self.map_app = map_app\r\n        self.coordinates = coordinates\r\n        self.humidity_data = humidity_data\r\n\r\n    @staticmethod\r\n    def get_color(temperature):\r\n        \"\"\"Determine line color based on temperature\"\"\"\r\n        if temperature < 0:\r\n            return 'lightcyan'\r\n        elif 0 <= temperature < 10:\r\n            return 'cyan'\r\n        elif 10 <= temperature < 15:\r\n            return 'mediumspringgreen'\r\n        elif 15 <= temperature < 20:\r\n            return 'springgreen'\r\n        elif 20 <= temperature < 25:\r\n            return 'lime'\r\n        elif 25 <= temperature < 30:\r\n            return 'limegreen'\r\n        elif 30 <= temperature < 35:\r\n            return 'green'\r\n        elif 35 <= temperature < 40:\r\n            return 'tomato'\r\n        elif 40 <= temperature < 45:\r\n            return 'orangered'\r\n        else:\r\n            return 'red'\r\n\r\n    def add_markers(self):\r\n        \"\"\"Add starting, destination, and humidity markers\"\"\"\r\n        if self.coordinates:\r\n            start_lat, start_lon, _ = self.coordinates[0]\r\n            end_lat, end_lon, _ = self.coordinates[-1]\r\n\r\n            # Starting and destination markers\r\n            self.map_app.add_marker(start_lat, start_lon, f'Starting point! Humidity: {self.humidity_data[0][2]}%')\r\n            self.map_app.add_marker(end_lat, end_lon, f'Destination! Humidity: {self.humidity_data[-1][2]}%')\r\n            self.map_app.set_initial_position(start_lat, start_lon, zoom=10)\r\n\r\n            # Humidity markers\r\n            for i in range(len(self.humidity_data) - 1):\r\n                if self.humidity_data[i][2] != self.humidity_data[i + 1][2]:\r\n                    lat, lon, humidity = self.humidity_data[i + 1]\r\n                    self.map_app.add_marker(lat, lon, f'Humidity: {humidity}%')\r\n\r\n    def draw_paths(self):\r\n        \"\"\"Draw paths between coordinates with color indicating temperature\"\"\"\r\n        for i in range(1, len(self.coordinates)):\r\n            lat1, lon1, temp1 = self.coordinates[i - 1]\r\n            lat2, lon2, temp2 = self.coordinates[i]\r\n            color = self.get_color(temp1)\r\n            self.map_app.add_path([(lat1, lon1), (lat2, lon2)], color=color)\r\n\r\n    def visualize(self):\r\n        \"\"\"Run visualization by adding markers and drawing paths\"\"\"\r\n        self.add_markers()\r\n        self.draw_paths()\r\n\r\n# Main Execution\r\nif __name__ == \"__main__\":\r\n\r\n    #create Map selection popup\r\n    selector = RouteSelector()\r\n    selected_url = selector.map_options()\r\n    print(\"Selected URL:\", selected_url)\r\n\r\n    \"\"\"################################\r\n\r\n    # Funktion, um die Legende zu erstellen\r\n    def erstelle_legende():\r\n        popup2 = tk.Toplevel()  # Use Toplevel for non-blocking window\r\n        popup2.wm_title(\"Farbverlauf Legende\")\r\n\r\n        label = ttk.Label(popup2, text=\"Farbverlauf für Temperaturen\")\r\n        label.pack(side=\"top\", fill=\"x\", pady=10)\r\n\r\n        temperaturbereiche = [\r\n            (\"unter 0\", 0), (0, 9), (10, 14), (15, 19), (20, 24),\r\n            (25, 29), (30, 34), (35, 39), (40, 44), (\"über 44\", 50)\r\n        ]\r\n\r\n        for (start, end) in temperaturbereiche:\r\n            frame = ttk.Frame(popup2)\r\n            farbe = RouteVisualizer.get_color((start if isinstance(start, int) else end - 10))\r\n\r\n            beschriftung = f\"{start}°C - {end}°C\" if isinstance(start, int) else f\"{start}\"\r\n\r\n            farb_label = ttk.Label(frame, text=beschriftung, background=farbe, width=20)\r\n            farb_label.pack(side=\"left\", padx=10)\r\n            frame.pack(side=\"top\", fill=\"x\", pady=5)\r\n\r\n        schliessen_button = ttk.Button(popup2, text=\"Schließen\", command=popup2.destroy)\r\n        schliessen_button.pack(side=\"top\", pady=10)\r\n\r\n        popup2.mainloop()  # Start the Tkinter loop for the legend popup\r\n\r\n    ################################ \"\"\"\r\n\r\n    # Initialize Map Application\r\n    app = MapApp()\r\n\r\n    # Fetch route data\r\n    route_url = selected_url\r\n    route_data = RouteData(route_url)\r\n    coordinates, humidity_data, temp, LF = route_data.parse_data()\r\n\r\n    # Visualize route\r\n    visualizer = RouteVisualizer(app, coordinates, humidity_data)\r\n    visualizer.visualize()\r\n\r\n    \"\"\"erstelle_legende()\"\"\"\r\n\r\n\r\n    # Implementieren der Daten (Raumtemperatur(temp)) und (Luftfeuchtigkeit(LF))\r\n    #Für die X achse wird die Anzahl werte von der Raumtemperatur genommen da sie gleich viele werte hat wie die Luftfeuchtigkeit\r\n    x = list(range(len(temp)))\r\n    y1 = temp\r\n    y2 = LF\r\n\r\n    # Neues Figure- und Axes-Objekt erstellen\r\n    fig, ax1 = plt.subplots()\r\n\r\n    # Zweites Axes erstellen, das dieselbe x-Achse teilt\r\n    ax2 = ax1.twinx()\r\n\r\n    # Daten auf jedem Axes plotten\r\n    ax1.plot(x, y1, 'b-', label='Temperatur')\r\n    ax2.plot(x, y2, 'r-', label='Luftfeuchtigkeit')\r\n\r\n    # Y-Achsen-Beschriftungen festlegen\r\n    ax1.set_ylabel('Temperatur', color='b')\r\n    ax2.set_ylabel('Luftfeuchtigkeit', color='r')\r\n\r\n    # X-Achsen-Beschriftung hinzufügen\r\n    ax1.set_xlabel('Zurückgelegte Strecke in %', color='g')\r\n\r\n    #X-Achsen-Beschriftungen in Prozent festlegen\r\n    ax1.set_xlim(0, len(x) - 1)\r\n    ax1.xaxis.set_major_locator(ticker.MultipleLocator((len(x)-1) / 10))\r\n    ax1.xaxis.set_major_formatter(ticker.FuncFormatter(lambda x, _: f'{int(round(x / (len(temp) - 1) * 100))}%'))\r\n\r\n    # Abbildung anzeigen\r\n    plt.show()\r\n    # Run the Tkinter app\r\n    app.run()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/GITLAB/Andres_Test.py b/GITLAB/Andres_Test.py
--- a/GITLAB/Andres_Test.py	(revision 0e05793876ab5e193ff54c62a6d5e28b14c0390f)
+++ b/GITLAB/Andres_Test.py	(date 1732629514634)
@@ -1,5 +1,4 @@
 import tkinter as tk
-from enum import verify
 from tkinter import messagebox, ttk
 import re
 import tkintermapview
Index: .idea/Cde1-1Da.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/Cde1-1Da.iml b/.idea/Cde1-1Da.iml
deleted file mode 100644
--- a/.idea/Cde1-1Da.iml	(revision 0e05793876ab5e193ff54c62a6d5e28b14c0390f)
+++ /dev/null	(revision 0e05793876ab5e193ff54c62a6d5e28b14c0390f)
@@ -1,7 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module version="4">
-  <component name="PyDocumentationSettings">
-    <option name="format" value="PLAIN" />
-    <option name="myDocStringFormat" value="Plain" />
-  </component>
-</module>
\ No newline at end of file
